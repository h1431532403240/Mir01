name: Deploy to Google Cloud

on:
  push:
    branches:
      - master # 或者您的主要分支

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCS_BUCKET: ${{ secrets.GCS_BUCKET }}
  CLOUD_SQL_CONNECTION_NAME: ${{ secrets.CLOUD_SQL_CONNECTION_NAME }}
  API_SERVICE_NAME: inventory-api
  CLIENT_SERVICE_NAME: inventory-client
  REGION: asia-east1 # 已根據您的需求設定

jobs:
  deploy-api:
    name: 'Deploy API to Cloud Run'
    runs-on: ubuntu-latest
    
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: 'Build and Push API Docker Image'
        run: |-
          gcloud artifacts repositories create ${{ env.API_SERVICE_NAME }}-repo \
            --repository-format=docker \
            --location=${{ env.REGION }} \
            --description="API Docker repository" || echo "Repo already exists"
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.API_SERVICE_NAME }}-repo/api:latest ./inventory-api
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.API_SERVICE_NAME }}-repo/api:latest

      - name: 'Deploy API to Cloud Run'
        run: |-
          gcloud run deploy ${{ env.API_SERVICE_NAME }} \
            --image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.API_SERVICE_NAME }}-repo/api:latest \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --add-cloudsql-instances=${{ env.CLOUD_SQL_CONNECTION_NAME }} \
            --set-env-vars="FILESYSTEM_DISK=gcs,GCS_BUCKET=${{ env.GCS_BUCKET }},GOOGLE_CLOUD_PROJECT_ID=${{ env.PROJECT_ID }}" \
            --set-secrets="LARAVEL_APP_KEY=LARAVEL_APP_KEY:latest,LARAVEL_DB_PASSWORD=LARAVEL_DB_PASSWORD:latest"

      - name: 'Run Database Migrations'
        run: |-
          gcloud run jobs create ${{ env.API_SERVICE_NAME }}-migrate --region=${{ env.REGION }} --image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.API_SERVICE_NAME }}-repo/api:latest --command=php --args=artisan,migrate,--force --add-cloudsql-instances=${{ env.CLOUD_SQL_CONNECTION_NAME }} --set-secrets="LARAVEL_APP_KEY=LARAVEL_APP_KEY:latest,LARAVEL_DB_PASSWORD=LARAVEL_DB_PASSWORD:latest" --execute-now || \
          gcloud run jobs execute ${{ env.API_SERVICE_NAME }}-migrate --region=${{ env.REGION }} --wait

  deploy-client:
    name: 'Deploy Client to Cloud Run'
    needs: deploy-api
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
        
      - name: Get API URL
        id: get_api_url
        run: echo "API_URL=$(gcloud run services describe ${{ env.API_SERVICE_NAME }} --platform=managed --region=${{ env.REGION }} --format='value(status.url)')" >> $GITHUB_OUTPUT
        shell: bash

      - name: 'Build and Push Client Docker Image'
        run: |-
          gcloud artifacts repositories create ${{ env.CLIENT_SERVICE_NAME }}-repo \
            --repository-format=docker \
            --location=${{ env.REGION }} \
            --description="Client Docker repository" || echo "Repo already exists"
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
          docker build --build-arg NEXT_PUBLIC_API_BASE_URL=${{ steps.get_api_url.outputs.API_URL }} -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.CLIENT_SERVICE_NAME }}-repo/client:latest ./inventory-client
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.CLIENT_SERVICE_NAME }}-repo/client:latest

      - name: 'Deploy Client to Cloud Run'
        run: |-
          gcloud run deploy ${{ env.CLIENT_SERVICE_NAME }} \
            --image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.CLIENT_SERVICE_NAME }}-repo/client:latest \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --set-env-vars="NEXT_PUBLIC_API_BASE_URL=${{ steps.get_api_url.outputs.API_URL }}" 
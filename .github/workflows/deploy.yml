name: Deploy to Google Cloud

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy (ignore cache)'
        required: false
        default: 'false'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCS_BUCKET: ${{ secrets.GCS_BUCKET }}
  CLOUD_SQL_CONNECTION_NAME: ${{ secrets.CLOUD_SQL_CONNECTION_NAME }}
  API_SERVICE_NAME: inventory-api
  CLIENT_SERVICE_NAME: inventory-client
  REGION: asia-east1

jobs:
  deploy-api:
    name: 'Deploy API to Cloud Run'
    runs-on: ubuntu-latest
    
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          token_format: 'access_token'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Verify Authentication'
        run: |-
          echo "🔍 驗證 GCP 認證..."
          gcloud auth list --filter=status:ACTIVE --format="value(account)" || exit 1
          echo "✅ 認證成功"
          
          echo "🔍 驗證專案存取權限..."
          gcloud projects describe ${{ env.PROJECT_ID }} --format="value(name)" || exit 1
          echo "✅ 專案存取權限正常"
          
          echo "🔍 驗證 Artifact Registry 存取權限..."
          gcloud artifacts repositories list --location=${{ env.REGION }} --format="value(name)" || exit 1
          echo "✅ Artifact Registry 存取權限正常"
          
          echo "🔍 驗證 Secret Manager 存取權限..."
          gcloud secrets versions access latest --secret="LARAVEL_APP_KEY" >/dev/null || exit 1
          gcloud secrets versions access latest --secret="LARAVEL_DB_PASSWORD" >/dev/null || exit 1
          echo "✅ Secret Manager 存取權限正常"
          
          echo "🔍 驗證 Compute Engine 預設服務帳號 Secret Manager 權限..."
          gcloud projects get-iam-policy ${{ env.PROJECT_ID }} \
            --flatten="bindings[].members" \
            --filter="bindings.members:672374290013-compute@developer.gserviceaccount.com AND bindings.role:roles/secretmanager.secretAccessor" \
            --format="value(bindings.role)" | grep -q "roles/secretmanager.secretAccessor" || {
              echo "❌ Compute Engine 預設服務帳號缺少 Secret Manager 權限"
              echo "請執行：gcloud projects add-iam-policy-binding ${{ env.PROJECT_ID }} \\"
              echo "  --member='serviceAccount:672374290013-compute@developer.gserviceaccount.com' \\"
              echo "  --role='roles/secretmanager.secretAccessor'"
              exit 1
            }
          echo "✅ Compute Engine 預設服務帳號 Secret Manager 權限正常"

      - name: 'Get Client URL for CORS'
        id: get_client_url
        run: |-
          # 優先使用自訂網域（如果有設定）
          if [ ! -z "${{ secrets.CLIENT_CUSTOM_DOMAIN_URL }}" ]; then
            echo "CLIENT_URL=${{ secrets.CLIENT_CUSTOM_DOMAIN_URL }}" >> $GITHUB_OUTPUT
            echo "使用客戶端自訂網域: ${{ secrets.CLIENT_CUSTOM_DOMAIN_URL }}"
          else
            # 使用預設的 Cloud Run URL
            echo "CLIENT_URL=https://${{ env.CLIENT_SERVICE_NAME }}-${{ secrets.GCP_SERVICE_ID }}-${{ env.REGION }}.a.run.app" >> $GITHUB_OUTPUT
            echo "使用預設 Cloud Run URL"
          fi

      - name: 'Build and Test API Docker Image'
        run: |-
          gcloud artifacts repositories create ${{ env.API_SERVICE_NAME }}-repo \
            --repository-format=docker \
            --location=${{ env.REGION }} \
            --description="API Docker repository" || echo "Repo already exists"
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
          
          echo "🔨 構建 Docker 映像..."
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.API_SERVICE_NAME }}-repo/api:latest ./inventory-api
          
          echo "🧪 測試容器啟動..."
          # 測試容器是否能在 8080 端口啟動（模擬 Cloud Run 環境）
          docker run -d --name test-api-container \
            -p 8080:8080 \
            -e PORT=8080 \
            -e APP_ENV=testing \
            -e APP_KEY=base64:dGVzdGluZ0tleUZvckRvY2tlcg== \
            -e DB_CONNECTION=sqlite \
            -e DB_DATABASE=:memory: \
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.API_SERVICE_NAME }}-repo/api:latest
          
          echo "⏳ 等待容器啟動..."
          sleep 30
          
          echo "🔍 檢查容器健康狀態..."
          if docker exec test-api-container curl -f http://localhost:8080/api/health; then
            echo "✅ 容器啟動成功並響應健康檢查"
          else
            echo "❌ 容器啟動失敗或健康檢查失敗"
            echo "📋 容器日誌："
            docker logs test-api-container
            docker rm -f test-api-container
            exit 1
          fi
          
          echo "🧹 清理測試容器..."
          docker rm -f test-api-container
          
          echo "📤 推送 Docker 映像..."
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.API_SERVICE_NAME }}-repo/api:latest

      - name: 'Deploy API to Cloud Run'
        run: |-
          gcloud run deploy ${{ env.API_SERVICE_NAME }} \
            --image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.API_SERVICE_NAME }}-repo/api:latest \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --add-cloudsql-instances=${{ env.CLOUD_SQL_CONNECTION_NAME }} \
            --set-env-vars="APP_ENV=production,APP_NAME=庫存管理系統,APP_DEBUG=false,APP_TIMEZONE=Asia/Taipei,APP_LOCALE=zh_TW,APP_FALLBACK_LOCALE=zh_TW,BCRYPT_ROUNDS=12,APP_MAINTENANCE_DRIVER=file,DB_CONNECTION=mysql,DB_HOST=/cloudsql/${{ env.CLOUD_SQL_CONNECTION_NAME }},DB_PORT=3306,DB_DATABASE=lomis_internal,DB_USERNAME=h1431532403240,FRONTEND_URL=${{ steps.get_client_url.outputs.CLIENT_URL }},SESSION_DOMAIN=.lomis.com.tw,SESSION_DRIVER=file,SESSION_LIFETIME=120,SESSION_ENCRYPT=false,SESSION_PATH=/,SANCTUM_STATEFUL_DOMAINS=www.lomis.com.tw,FILESYSTEM_DISK=gcs,GCS_BUCKET=${{ env.GCS_BUCKET }},GOOGLE_CLOUD_PROJECT_ID=${{ env.PROJECT_ID }},CACHE_STORE=file,QUEUE_CONNECTION=sync,BROADCAST_CONNECTION=log,LOG_CHANNEL=stack,LOG_LEVEL=error,SPATIE_PERMISSION_CACHE_EXPIRATION_TIME=3600" \
            --set-secrets="LARAVEL_APP_KEY=LARAVEL_APP_KEY:latest,LARAVEL_DB_PASSWORD=LARAVEL_DB_PASSWORD:latest" \
            --timeout=300 \
            --memory=1Gi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=3
            
      - name: 'Update API URL Environment Variable'
        run: |-
          echo "更新 API URL 環境變數..."
          API_URL=$(gcloud run services describe ${{ env.API_SERVICE_NAME }} --platform=managed --region=${{ env.REGION }} --format='value(status.url)')
          gcloud run services update ${{ env.API_SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --update-env-vars="APP_URL=${API_URL}"

      - name: 'Run Database Migrations'
        run: |-
          gcloud run jobs create ${{ env.API_SERVICE_NAME }}-migrate \
            --region=${{ env.REGION }} \
            --image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.API_SERVICE_NAME }}-repo/api:latest \
            --command=php \
            --args=artisan,migrate,--force \
            --add-cloudsql-instances=${{ env.CLOUD_SQL_CONNECTION_NAME }} \
            --set-env-vars="APP_ENV=production,DB_CONNECTION=mysql,DB_HOST=/cloudsql/${{ env.CLOUD_SQL_CONNECTION_NAME }},DB_PORT=3306,DB_DATABASE=lomis_internal,DB_USERNAME=h1431532403240" \
            --set-secrets="LARAVEL_APP_KEY=LARAVEL_APP_KEY:latest,LARAVEL_DB_PASSWORD=LARAVEL_DB_PASSWORD:latest" \
            --task-timeout=300 \
            --parallelism=1 \
            --max-retries=1 || echo "Migration job already exists"
          
          echo "執行資料庫遷移..."
          gcloud run jobs execute ${{ env.API_SERVICE_NAME }}-migrate --region=${{ env.REGION }} --wait

  deploy-client:
    name: 'Deploy Client to Cloud Run'
    needs: deploy-api
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          token_format: 'access_token'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Verify Authentication'
        run: |-
          echo "🔍 驗證 GCP 認證（Client 部署）..."
          gcloud auth list --filter=status:ACTIVE --format="value(account)" || exit 1
          echo "✅ Client 部署認證正常"
        
      - name: 'Determine API URL'
        id: get_api_url
        run: |-
          # 優先使用自訂網域（如果有設定）
          if [ ! -z "${{ secrets.API_CUSTOM_DOMAIN_URL }}" ]; then
            echo "API_URL=${{ secrets.API_CUSTOM_DOMAIN_URL }}" >> $GITHUB_OUTPUT
            echo "使用自訂網域: ${{ secrets.API_CUSTOM_DOMAIN_URL }}"
          else
            # 如果沒有自訂網域，則使用 Cloud Run 自動生成的 URL
            API_URL=$(gcloud run services describe ${{ env.API_SERVICE_NAME }} --platform=managed --region=${{ env.REGION }} --format='value(status.url)')
            echo "API_URL=${API_URL}" >> $GITHUB_OUTPUT
            echo "使用 Cloud Run URL: ${API_URL}"
          fi

      - name: 'Build and Push Client Docker Image'
        run: |-
          gcloud artifacts repositories create ${{ env.CLIENT_SERVICE_NAME }}-repo \
            --repository-format=docker \
            --location=${{ env.REGION }} \
            --description="Client Docker repository" || echo "Repo already exists"
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
          docker build --build-arg NEXT_PUBLIC_API_BASE_URL=${{ steps.get_api_url.outputs.API_URL }} -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.CLIENT_SERVICE_NAME }}-repo/client:latest ./inventory-client
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.CLIENT_SERVICE_NAME }}-repo/client:latest

      - name: 'Deploy Client to Cloud Run'
        run: |-
          gcloud run deploy ${{ env.CLIENT_SERVICE_NAME }} \
            --image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.CLIENT_SERVICE_NAME }}-repo/client:latest \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --set-env-vars="NEXT_PUBLIC_API_BASE_URL=${{ steps.get_api_url.outputs.API_URL }}" \
            --timeout=300 \
            --memory=1Gi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=3

      - name: 'Display Deployment URLs'
        run: |-
          echo "🎉 部署完成！"
          echo "📋 服務網址："
          echo "API 服務: ${{ steps.get_api_url.outputs.API_URL }}"
          CLIENT_URL=$(gcloud run services describe ${{ env.CLIENT_SERVICE_NAME }} --platform=managed --region=${{ env.REGION }} --format='value(status.url)')
          echo "前端服務: ${CLIENT_URL}"
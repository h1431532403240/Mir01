'use client';

import React from 'react';
import { useOrderDetail, useUpdateOrderItemStatus } from '@/hooks/queries/useEntityQueries';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Loader2 } from "lucide-react";

interface OrderDetailComponentProps {
  orderId: number;
}

export function OrderDetailComponent({ orderId }: OrderDetailComponentProps) {
    const { data: order, isLoading, isError, error } = useOrderDetail(orderId);
    const { mutate: updateItemStatus, isPending } = useUpdateOrderItemStatus();
    
    // üéØ ÁãÄÊÖã‰∏≠ÊñáÂ∞çÁÖßË°®
    const getStatusText = (status: string) => {
        const statusMap: Record<string, string> = {
            // ‰ªòÊ¨æÁãÄÊÖã
            'pending': 'ÂæÖ‰ªòÊ¨æ',
            'paid': 'Â∑≤‰ªòÊ¨æ',
            'partial': 'ÈÉ®ÂàÜ‰ªòÊ¨æ',
            'refunded': 'Â∑≤ÈÄÄÊ¨æ',
            // Âá∫Ë≤®ÁãÄÊÖã
            'processing': 'ËôïÁêÜ‰∏≠',
            'shipped': 'Â∑≤Âá∫Ë≤®',
            'delivered': 'Â∑≤ÈÄÅÈÅî',
            'cancelled': 'Â∑≤ÂèñÊ∂à',
            'completed': 'Â∑≤ÂÆåÊàê',
            // È†ÖÁõÆÁãÄÊÖã
            'ÂæÖËôïÁêÜ': 'ÂæÖËôïÁêÜ',
            'Â∑≤Âè´Ë≤®': 'Â∑≤Âè´Ë≤®',
            'Â∑≤Âá∫Ë≤®': 'Â∑≤Âá∫Ë≤®',
            'ÂÆåÊàê': 'ÂÆåÊàê'
        };
        return statusMap[status] || status;
    };
    
    // ÂèØÁî®ÁöÑÈ†ÖÁõÆÁãÄÊÖãÈÅ∏È†Ö
    const statusOptions = [
        { value: 'ÂæÖËôïÁêÜ', label: 'ÂæÖËôïÁêÜ' },
        { value: 'Â∑≤Âè´Ë≤®', label: 'Â∑≤Âè´Ë≤®' },
        { value: 'Â∑≤Âá∫Ë≤®', label: 'Â∑≤Âá∫Ë≤®' },
        { value: 'ÂÆåÊàê', label: 'ÂÆåÊàê' },
    ];
    
    // ËôïÁêÜÁãÄÊÖãÊõ¥Êñ∞
    const handleStatusChange = (itemId: number, newStatus: string) => {
        updateItemStatus({
            orderItemId: itemId,
            status: newStatus,
        });
    };

    if (isLoading) {
        return (
            <div className="grid gap-6 md:grid-cols-3">
                <Card className="md:col-span-2"><CardHeader><Skeleton className="h-8 w-3/4" /></CardHeader><CardContent><Skeleton className="h-24 w-full" /></CardContent></Card>
                <Card><CardHeader><Skeleton className="h-8 w-3/4" /></CardHeader><CardContent><Skeleton className="h-24 w-full" /></CardContent></Card>
            </div>
        );
    }

    if (isError) {
        return <div className="text-red-500">ÁÑ°Ê≥ïÂä†ËºâË®ÇÂñÆË©≥ÊÉÖ: {error?.message}</div>;
    }

    if (!order) {
        return <div>Êâæ‰∏çÂà∞Ë®ÇÂñÆË≥áÊñô„ÄÇ</div>;
    }

    // üéØ Ë®àÁÆóÁ∏ΩË®àË≥áË®ä
    const subtotal = order.items?.reduce((acc: number, item: any) => 
        acc + (item.price * item.quantity), 0) || 0;

    return (
        <div className="grid auto-rows-max items-start gap-4 md:gap-8 lg:grid-cols-3">
            {/* Â∑¶ÂÅ¥‰∏ªÊ¨ÑÔºå‰ΩîÊìö 2/3 ÂØ¨Â∫¶ */}
            <div className="grid gap-4 lg:col-span-2">
                {/* Ë®ÇÂñÆÈ†ÖÁõÆÂç°Áâá - ‰∏ªË¶ÅÂÖßÂÆπ */}
                <Card>
                    <CardHeader>
                        <CardTitle>Ë®ÇÂñÆÂìÅÈ†Ö</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHead>ÂïÜÂìÅÂêçÁ®±</TableHead>
                                    <TableHead>SKU</TableHead>
                                    <TableHead className="text-right">ÂñÆÂÉπ</TableHead>
                                    <TableHead className="text-center">Êï∏Èáè</TableHead>
                                    <TableHead className="text-right">Â∞èË®à</TableHead>
                                    <TableHead>È†ÖÁõÆÁãÄÊÖã</TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                {order.items?.map((item: any) => (
                                    <TableRow key={item.id}>
                                        <TableCell>
                                            <div className="flex items-center gap-2">
                                                <div>
                                                    <div className="font-medium">{item.product_name}</div>
                                                    {item.custom_specifications && (
                                                        <Badge variant="outline" className="mt-1">Ë®ÇË£Ω</Badge>
                                                    )}
                                                </div>
                                            </div>
                                            {/* üéØ ÂÑ™ÈõÖÂú∞È°ØÁ§∫Ë®ÇË£ΩË¶èÊ†º */}
                                            {item.custom_specifications && (
                                                <div className="mt-2 p-2 bg-muted rounded-md">
                                                    <div className="text-xs font-medium text-muted-foreground">Ë®ÇË£ΩË¶èÊ†ºÔºö</div>
                                                    <div className="text-sm mt-1">
                                                        {Object.entries(
                                                            typeof item.custom_specifications === 'string' 
                                                                ? JSON.parse(item.custom_specifications) 
                                                                : item.custom_specifications
                                                        ).map(([key, value]) => (
                                                            <div key={key} className="flex gap-2">
                                                                <span className="font-medium">{key}:</span>
                                                                <span>{value as string}</span>
                                                            </div>
                                                        ))}
                                                    </div>
                                                </div>
                                            )}
                                        </TableCell>
                                        <TableCell className="font-mono text-sm">{item.sku}</TableCell>
                                        <TableCell className="text-right">${item.price.toLocaleString()}</TableCell>
                                        <TableCell className="text-center">{item.quantity}</TableCell>
                                        <TableCell className="text-right font-medium">${(item.price * item.quantity).toLocaleString()}</TableCell>
                                        <TableCell>
                                            <div className="flex items-center gap-2">
                                                <Select
                                                    value={item.status}
                                                    onValueChange={(newStatus) => handleStatusChange(item.id, newStatus)}
                                                    disabled={isPending}
                                                >
                                                    <SelectTrigger className="w-[120px]">
                                                        <SelectValue />
                                                    </SelectTrigger>
                                                    <SelectContent>
                                                        {statusOptions.map((option) => (
                                                            <SelectItem key={option.value} value={option.value}>
                                                                {option.label}
                                                            </SelectItem>
                                                        ))}
                                                    </SelectContent>
                                                </Select>
                                                {isPending && (
                                                    <Loader2 className="h-4 w-4 animate-spin" />
                                                )}
                                            </div>
                                        </TableCell>
                                    </TableRow>
                                ))}
                            </TableBody>
                        </Table>
                    </CardContent>
                </Card>
            </div>
            
            {/* Âè≥ÂÅ¥ÈÇäÊ¨ÑÔºå‰ΩîÊìö 1/3 ÂØ¨Â∫¶ */}
            <div className="grid gap-4">
                {/* Ë®ÇÂñÆÊëòË¶ÅÂç°Áâá */}
                <Card>
                    <CardHeader>
                        <CardTitle>Ë®ÇÂñÆÊëòË¶Å</CardTitle>
                    </CardHeader>
                    <CardContent className="grid gap-2 text-sm">
                        <div className="flex items-center justify-between">
                            <span className="text-muted-foreground">Ë®ÇÂñÆËôüÁ¢º</span>
                            <span className="font-medium">{order.order_number}</span>
                        </div>
                        <div className="flex items-center justify-between">
                            <span className="text-muted-foreground">‰∏ãÂñÆÊôÇÈñì</span>
                            <span>{new Date(order.created_at).toLocaleString('zh-TW')}</span>
                        </div>
                        <div className="flex items-center justify-between">
                            <span className="text-muted-foreground">Ë≤®Áâ©ÁãÄÊÖã</span>
                            <Badge variant={order.shipping_status === 'shipped' ? 'default' : 'secondary'}>
                                {getStatusText(order.shipping_status)}
                            </Badge>
                        </div>
                        <div className="flex items-center justify-between">
                            <span className="text-muted-foreground">‰ªòÊ¨æÁãÄÊÖã</span>
                            <Badge variant={order.payment_status === 'paid' ? 'default' : 'secondary'}>
                                {getStatusText(order.payment_status)}
                            </Badge>
                        </div>
                        
                        {/* ÈáëÈ°çÊòéÁ¥∞ */}
                        <div className="pt-3 mt-3 border-t space-y-2">
                            <div className="flex items-center justify-between">
                                <span className="text-muted-foreground">ÂïÜÂìÅÂ∞èË®à</span>
                                <span>${subtotal.toLocaleString()}</span>
                            </div>
                            {(order.shipping_fee && order.shipping_fee > 0) && (
                                <div className="flex items-center justify-between">
                                    <span className="text-muted-foreground">ÈÅãË≤ª</span>
                                    <span>${order.shipping_fee.toLocaleString()}</span>
                                </div>
                            )}
                            {order.discount_amount > 0 && (
                                <div className="flex items-center justify-between">
                                    <span className="text-muted-foreground">ÊäòÊâ£</span>
                                    <span className="text-green-600">-${order.discount_amount.toLocaleString()}</span>
                                </div>
                            )}
                            {order.tax > 0 && (
                                <div className="flex items-center justify-between">
                                    <span className="text-muted-foreground">Á®ÖÈ°ç</span>
                                    <span>${order.tax.toLocaleString()}</span>
                                </div>
                            )}
                            <div className="flex items-center justify-between font-medium text-base pt-2 border-t">
                                <span className="text-muted-foreground">Ë®ÇÂñÆÁ∏ΩÈ°ç</span>
                                <span>{new Intl.NumberFormat('zh-TW', { 
                                    style: 'currency', 
                                    currency: 'TWD', 
                                    minimumFractionDigits: 0 
                                }).format(order.grand_total)}</span>
                            </div>
                        </div>
                    </CardContent>
                </Card>

                {/* ÂÆ¢Êà∂Ë≥áË®äÂç°Áâá */}
                <Card>
                    <CardHeader>
                        <CardTitle>ÂÆ¢Êà∂Ë≥áË®ä</CardTitle>
                    </CardHeader>
                    <CardContent className="grid gap-2 text-sm">
                        <div className="flex items-center justify-between">
                            <span className="text-muted-foreground">ÂÆ¢Êà∂ÂêçÁ®±</span>
                            <span className="font-medium">{order.customer?.name || 'Êú™Êèê‰æõ'}</span>
                        </div>
                        <div className="flex items-center justify-between">
                            <span className="text-muted-foreground">ËÅØÁµ°ÈõªË©±</span>
                            <span>{order.customer?.phone || 'Êú™Êèê‰æõ'}</span>
                        </div>
                        {order.shipping_address && (
                            <div className="pt-2 mt-2 border-t">
                                <p className="text-muted-foreground mb-1">ÈÅãÈÄÅÂú∞ÂùÄ</p>
                                <p className="text-sm">{order.shipping_address}</p>
                            </div>
                        )}
                        {order.billing_address && (
                            <div className="pt-2 mt-2 border-t">
                                <p className="text-muted-foreground mb-1">Â∏≥ÂñÆÂú∞ÂùÄ</p>
                                <p className="text-sm">{order.billing_address}</p>
                            </div>
                        )}
                        {order.notes && (
                            <div className="pt-2 mt-2 border-t">
                                <p className="text-muted-foreground mb-1">ÂÇôË®ª</p>
                                <p className="text-sm whitespace-pre-wrap">{order.notes}</p>
                            </div>
                        )}
                    </CardContent>
                </Card>
            </div>
        </div>
    );
} 